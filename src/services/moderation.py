"""
–°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Ç–µ–º—ã –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ü–µ–ª–∏ –¥–∏–∞–ª–æ–≥–∞.
"""

import json
from typing import Dict, Optional

from core.logger import get_logger, log_exception
from core.exceptions import ModerationError
from api.proxyapi_client import ProxyAPIClient
from prompts.builders import PromptBuilder
from config.settings import Settings

logger = get_logger(__name__)


class ModerationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ø–æ—Å–æ–±—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–µ–º–µ.
    """
    
    def __init__(self, api_client: ProxyAPIClient, settings: Settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        
        Args:
            api_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è API
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.api_client = api_client
        self.settings = settings
    
    async def check_relevance(
        self,
        current_step: str,
        bot_question: str,
        user_response: str
    ) -> Dict[str, any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            current_step: –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞
            bot_question: –í–æ–ø—Ä–æ—Å –±–æ—Ç–∞
            user_response: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏:
            - is_relevant: bool - —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –ª–∏ –æ—Ç–≤–µ—Ç
            - reason: str - –ø—Ä–∏—á–∏–Ω–∞ —Ä–µ—à–µ–Ω–∏—è
            - suggestion: str - –∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –∫ —Ç–µ–º–µ (–µ—Å–ª–∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ)
            
        Raises:
            ModerationError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ | –≠—Ç–∞–ø: {current_step} | –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(user_response)}")
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            prompt = PromptBuilder.build_moderation_prompt(
                current_step=current_step,
                bot_question=bot_question,
                user_response=user_response
            )
            
            messages = PromptBuilder.build_messages("moderator", prompt)
            
            # –ó–∞–ø—Ä–æ—Å –∫ API
            response = await self.api_client.chat_completion(
                messages=messages,
                model=self.settings.model_text_generation,
                temperature=self.settings.temperature_moderation,
                max_tokens=200,
                json_mode=True
            )
            
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON
            try:
                result = json.loads(response)
            except json.JSONDecodeError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {response}")
                raise ModerationError(
                    "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                    original_error=e
                )
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            required_fields = ["is_relevant", "reason", "suggestion"]
            for field in required_fields:
                if field not in result:
                    raise ModerationError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            
            is_relevant = result["is_relevant"]
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {'–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ' if is_relevant else '–ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ'} | {result['reason']}")
            
            return result
            
        except ModerationError:
            raise
        except Exception as e:
            log_exception(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏")
            raise ModerationError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {str(e)}",
                original_error=e
            )
    
    def get_redirection_message(
        self,
        attempt_number: int,
        bot_question: str,
        suggestion: Optional[str] = None
    ) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–µ–º–µ
        
        –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å—Ç—Ä–æ–∂–µ —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.
        
        Args:
            attempt_number: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (1, 2, 3, ...)
            bot_question: –í–æ–ø—Ä–æ—Å –±–æ—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è
            suggestion: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç AI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if attempt_number == 1:
            # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –º—è–≥–∫–æ
            if suggestion:
                return suggestion
            return f"–î–∞–≤–∞–π —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ üòä\n\n{bot_question}"
        
        elif attempt_number == 2:
            # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –Ω–∞—Å—Ç–æ–π—á–∏–≤–µ–µ
            return (
                f"–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ —è —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ üéØ\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ –Ω–∞—à–µ–π –∑–∞–¥–∞—á–µ.\n\n{bot_question}"
            )
        
        elif attempt_number == 3:
            # –¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            return (
                f"–Ø –≤–∏–∂—É, —á—Ç–æ —Ç–µ–±—è —á—Ç–æ-—Ç–æ –æ—Ç–≤–ª–µ–∫–∞–µ—Ç üòî\n\n"
                f"–ú–Ω–µ –≤–∞–∂–Ω–æ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, "
                f"–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –º–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n\n"
                f"–ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è, –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ.\n\n"
                f"–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å?\n\n{bot_question}"
            )
        
        else:
            # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∏ –¥–∞–ª–µ–µ - –ø—Ä–æ—â–∞–Ω–∏–µ
            return (
                "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Å–µ–π—á–∞—Å —Ç—ã –Ω–µ –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º üòå\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤! –û—Ç–ø—Ä–∞–≤—å /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.\n\n"
                "–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ! üëã"
            )
    
    def should_end_conversation(self, attempt_number: int) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
        
        Args:
            attempt_number: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å, False –∏–Ω–∞—á–µ
        """
        return attempt_number > self.settings.max_off_topic_attempts
    
    def detect_offensive_content(self, text: str) -> bool:
        """
        –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É
        
        –≠—Ç–æ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞. –î–ª—è production –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç, False –∏–Ω–∞—á–µ
        """
        # –°–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏
        # –í production —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã
        offensive_patterns = [
            "–±–ª—è—Ç—å", "–±–ª—è", "—Ö—É–π", "–ø–∏–∑–¥", "–µ–±–∞—Ç—å", "–µ–±–∞", "—Å—É–∫–∞", 
            "–ø–∏–¥–æ—Ä", "–º—É–¥–∞–∫", "–¥–æ–ª–±–æ–µ–±", "—É–µ–±–æ–∫"
        ]
        
        text_lower = text.lower()
        return any(pattern in text_lower for pattern in offensive_patterns)

