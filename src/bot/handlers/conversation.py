"""
Handler –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
"""

import io
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext

from core.logger import get_logger, log_user_action, log_exception
from core.exceptions import GenerationError, ModerationError
from bot.states import ContentGenerationStates, get_state_question
from bot.keyboards import get_ideas_keyboard, get_continue_keyboard, get_yes_no_keyboard, get_main_keyboard
from bot.utils import (
    send_with_typing,
    send_typing_action,
    format_ideas_message,
    format_post_with_hashtags,
    safe_send_message
)
from services.moderation import ModerationService
from services.idea_generator import IdeaGenerator
from services.post_generator import PostGenerator
from api.proxyapi_client import ProxyAPIClient

logger = get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º router
conversation_router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã (–±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ main.py)
moderation_service: ModerationService = None
idea_generator: IdeaGenerator = None
post_generator: PostGenerator = None
api_client: ProxyAPIClient = None


def setup_services(moderation: ModerationService, ideas: IdeaGenerator, posts: PostGenerator, api: ProxyAPIClient):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è handlers"""
    global moderation_service, idea_generator, post_generator, api_client
    moderation_service = moderation
    idea_generator = ideas
    post_generator = posts
    api_client = api


# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

async def reformulate_user_input(user_text: str, context: str) -> str:
    """
    –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä–∞–º–æ—Ç–Ω—É—é —Ñ–æ—Ä–º—É
    
    Args:
        user_text: –¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è —Ö–ª–µ–± –ø–µ–∫—É")
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç ('niche', 'goal', 'format')
        
    Returns:
        –ì—Ä–∞–º–æ—Ç–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í—ã–ø–µ—á–∫–∞ —Ö–ª–µ–±–∞")
    """
    try:
        if context == 'niche':
            prompt = f"""–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä–∞–º–æ—Ç–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∏—à–∏/—Ç–µ–º—ã.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "{user_text}"

–ü—Ä–∞–≤–∏–ª–∞:
- –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ –∫–∞–∫ –¥–µ–π—Å—Ç–≤–∏–µ ("—è —Ö–ª–µ–± –ø–µ–∫—É", "–¥–µ–ª–∞—é –º–µ–±–µ–ª—å"), –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –≤ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ ("–í—ã–ø–µ—á–∫–∞ —Ö–ª–µ–±–∞", "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –º–µ–±–µ–ª–∏")
- –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ("—Å–æ–±–∏—Ä–∞—é –º–∞—à–∏–Ω—ã"), —Å–¥–µ–ª–∞–π –≥—Ä–∞–º–æ—Ç–Ω–æ ("–°–±–æ—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
- –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª, –Ω–æ —Å–¥–µ–ª–∞–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π
- –ú–∞–∫—Å–∏–º—É–º 3-5 —Å–ª–æ–≤
- –¢–æ–ª—å–∫–æ —Å—É—Ç—å, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

        elif context == 'goal':
            prompt = f"""–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä–∞–º–æ—Ç–Ω—É—é —Ñ–æ—Ä–º—É.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "{user_text}"

–ü—Ä–∞–≤–∏–ª–∞:
- –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –≤ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ("—Ö–æ—á—É –∫–ª–∏–µ–Ω—Ç–æ–≤" ‚Üí "–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤")
- –°–¥–µ–ª–∞–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É —á–µ—Ç–∫–æ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π  
- –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª
- –ú–∞–∫—Å–∏–º—É–º 5-7 —Å–ª–æ–≤

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

        elif context == 'format':
            prompt = f"""–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –≥—Ä–∞–º–æ—Ç–Ω—É—é —Ñ–æ—Ä–º—É.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "{user_text}"

–ü—Ä–∞–≤–∏–ª–∞:
- –°–¥–µ–ª–∞–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É —á–µ—Ç–∫–æ–π ("–ø–æ—Å—Ç –∏–Ω—Å—Ç–µ" ‚Üí "–ü–æ—Å—Ç –¥–ª—è Instagram")
- –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª
- –ú–∞–∫—Å–∏–º—É–º 5-7 —Å–ª–æ–≤

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""
        
        else:
            return user_text
        
        # –ó–∞–ø—Ä–æ—Å –∫ AI
        response = await api_client.chat_completion(
            messages=[{"role": "user", "content": prompt}],
            model="gpt-4o-mini",  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏
            temperature=0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            max_tokens=50
        )
        
        reformulated = response.strip().strip('"').strip("'")
        logger.debug(f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ | '{user_text}' ‚Üí '{reformulated}'")
        
        return reformulated
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª: {e}")
        return user_text  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª

async def check_and_moderate(
    message: Message,
    state: FSMContext,
    current_step: str,
    bot_question: str
) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é
    
    Returns:
        True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç (–∏ –¥–∏–∞–ª–æ–≥ –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å)
    """
    user_response = message.text
    data = await state.get_data()
    off_topic_count = data.get("off_topic_count", 0)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç
    if moderation_service.detect_offensive_content(user_response):
        off_topic_count += 1
        await state.update_data(off_topic_count=off_topic_count)
        
        if off_topic_count == 1:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ üôè\n\n"
                "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
                "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ.",
                reply_markup=get_main_keyboard()
            )
            return False
        else:
            await message.answer(
                "–ú–Ω–µ –∂–∞–ª—å, –Ω–æ —è –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º –∫–ª—é—á–µ.\n\n"
                "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å.\n\n"
                "–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ AI
    try:
        result = await moderation_service.check_relevance(
            current_step=current_step,
            bot_question=bot_question,
            user_response=user_response
        )
        
        if result["is_relevant"]:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω
            await state.update_data(off_topic_count=0)
            return True
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ
        off_topic_count += 1
        await state.update_data(off_topic_count=off_topic_count)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
        if moderation_service.should_end_conversation(off_topic_count):
            await message.answer(
                moderation_service.get_redirection_message(
                    off_topic_count, 
                    bot_question
                ),
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return False
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ç–µ–º–µ
        redirect_msg = moderation_service.get_redirection_message(
            off_topic_count,
            bot_question,
            result.get("suggestion")
        )
        
        await send_with_typing(
            bot=message.bot,
            chat_id=message.chat.id,
            text=redirect_msg,
            reply_markup=get_main_keyboard()
        )
        
        return False
        
    except ModerationError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, —Å—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
        return True


# ============================================================================
# STATE HANDLERS
# ============================================================================

@conversation_router.message(ContentGenerationStates.COLLECTING_NICHE, F.text)
async def handle_niche(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∏—à–∏"""
    user_id = message.from_user.id
    log_user_action(logger, user_id, "–í–≤–æ–¥ –Ω–∏—à–∏", message.text[:50])
    
    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    if not await check_and_moderate(
        message,
        state,
        "COLLECTING_NICHE",
        get_state_question("COLLECTING_NICHE")
    ):
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    niche_original = message.text.strip()
    
    # –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    niche_formatted = await reformulate_user_input(niche_original, 'niche')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
    await state.update_data(niche=niche_original)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É —Ü–µ–ª–∏
    response_text = f"""–û—Ç–ª–∏—á–Ω–æ! **{niche_formatted}** - –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –Ω–∏—à–∞ üí°

–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, **–∫–∞–∫–∞—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å —Ç–≤–æ–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞?**

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ –ü—Ä–∏–≤–ª–µ—á—å –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
‚Ä¢ –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —É—Å–ª—É–≥—É
‚Ä¢ –û–±—É—á–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é
‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
‚Ä¢ –ß—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?"""
    
    await send_with_typing(
        bot=message.bot,
        chat_id=message.chat.id,
        text=response_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )
    
    await state.set_state(ContentGenerationStates.COLLECTING_GOAL)


@conversation_router.message(ContentGenerationStates.COLLECTING_GOAL, F.text)
async def handle_goal(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏"""
    user_id = message.from_user.id
    log_user_action(logger, user_id, "–í–≤–æ–¥ —Ü–µ–ª–∏", message.text[:50])
    
    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    if not await check_and_moderate(
        message,
        state,
        "COLLECTING_GOAL",
        get_state_question("COLLECTING_GOAL")
    ):
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    goal_original = message.text.strip()
    
    # –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    goal_formatted = await reformulate_user_input(goal_original, 'goal')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
    await state.update_data(goal=goal_original)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
    response_text = f"""–ü–æ–Ω—è–ª! **{goal_formatted}** üéØ

–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: **–≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç?**

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ –ü–æ—Å—Ç –¥–ª—è Instagram/VK/Facebook
‚Ä¢ –°—Ç–∞—Ç—å—è –¥–ª—è –±–ª–æ–≥–∞ –∏–ª–∏ Telegram-–∫–∞–Ω–∞–ª–∞
‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ/Reels/Shorts
‚Ä¢ Email-—Ä–∞—Å—Å—ã–ª–∫–∞
‚Ä¢ –ß—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?"""
    
    await send_with_typing(
        bot=message.bot,
        chat_id=message.chat.id,
        text=response_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )
    
    await state.set_state(ContentGenerationStates.COLLECTING_FORMAT)


@conversation_router.message(ContentGenerationStates.COLLECTING_FORMAT, F.text)
async def handle_format(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π"""
    user_id = message.from_user.id
    log_user_action(logger, user_id, "–í–≤–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∞", message.text[:50])
    
    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    if not await check_and_moderate(
        message,
        state,
        "COLLECTING_FORMAT",
        get_state_question("COLLECTING_FORMAT")
    ):
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    format_original = message.text.strip()
    
    # –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    format_formatted = await reformulate_user_input(format_original, 'format')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    await state.update_data(
        format_type=format_original,  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        format_formatted=format_formatted  # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    niche = data.get("niche")
    goal = data.get("goal")
    
    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await send_with_typing(
        bot=message.bot,
        chat_id=message.chat.id,
        text=f"–°—É–ø–µ—Ä! **{format_formatted}** ‚ú®\n\n–°–µ–π—á–∞—Å –ø–æ–¥—É–º–∞—é –∏ –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ **5 –∫—Ä—É—Ç—ã—Ö –∏–¥–µ–π** –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞! ü§î",
        parse_mode="Markdown",
        typing_duration=2,
        reply_markup=get_main_keyboard()
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π
    await state.set_state(ContentGenerationStates.GENERATING_IDEAS)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è AI)
    await generate_and_show_ideas(message, state, niche, goal, format_original)


async def generate_and_show_ideas(message: Message, state: FSMContext, niche: str, goal: str, format_type: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–¥–µ–π"""
    chat_id = message.chat.id
    bot = message.bot
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await send_typing_action(bot, chat_id, duration=3)
        await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–∏
        ideas = await idea_generator.generate_ideas(
            niche=niche,
            goal=goal,
            format_type=format_type
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–∏
        await state.update_data(ideas=ideas)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        ideas_text = format_ideas_message(ideas)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º typing indicator
        await send_typing_action(bot, chat_id, duration=2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–¥–µ–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        ideas_message = await bot.send_message(
            chat_id=chat_id,
            text=ideas_text,
            reply_markup=get_ideas_keyboard(len(ideas)),
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        await state.update_data(last_buttons_message_id=ideas_message.message_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –≤—ã–±–æ—Ä–∞
        await state.set_state(ContentGenerationStates.WAITING_IDEA_CHOICE)
        
    except GenerationError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
            reply_markup=get_main_keyboard()
        )
        await state.set_state(ContentGenerationStates.COLLECTING_FORMAT)


def should_offer_image(format_type: str) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    
    Args:
        format_type: –§–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
    Returns:
        True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    """
    format_lower = format_type.lower()
    
    # –§–æ—Ä–º–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    with_image_keywords = [
        "–ø–æ—Å—Ç", "—Å—Ç–∞—Ç—å—è", "–ø—É–±–ª–∏–∫–∞—Ü–∏—è", "–∑–∞–º–µ—Ç–∫–∞", "–±–ª–æ–≥", 
        "instagram", "facebook", "vk", "telegram", "—Å–æ—Ü—Å–µ—Ç"
    ]
    
    # –§–æ—Ä–º–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    without_image_keywords = [
        "—Å—Ü–µ–Ω–∞—Ä–∏–π", "—Å–∫—Ä–∏–ø—Ç", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–ø–ª–∞–Ω", "—Ç–µ–∫—Å—Ç",
        "email", "–ø–∏—Å—å–º–æ", "—Ä–∞—Å—Å—ã–ª–∫–∞", "–æ–ø–∏—Å–∞–Ω–∏–µ"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for keyword in without_image_keywords:
        if keyword in format_lower:
            return False
    
    for keyword in with_image_keywords:
        if keyword in format_lower:
            return True
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return True


@conversation_router.callback_query(ContentGenerationStates.WAITING_IDEA_CHOICE, F.data.startswith("idea_"))
async def handle_idea_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–¥–µ–∏"""
    await callback.answer()
    
    user_id = callback.from_user.id
    idea_id = int(callback.data.split("_")[1])
    
    log_user_action(logger, user_id, "–í—ã–±–æ—Ä –∏–¥–µ–∏", f"ID: {idea_id}")
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ (—Å –∞–Ω–∏–º–∞—Ü–∏–µ–π), –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–¥–µ—è–º–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–¥–µ—é
    data = await state.get_data()
    ideas = data.get("ideas", [])
    
    selected_idea = None
    for idea in ideas:
        if idea["id"] == idea_id:
            selected_idea = idea
            break
    
    if not selected_idea:
        await callback.message.answer("üòî –û—à–∏–±–∫–∞: –∏–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–¥–µ—é
    await state.update_data(selected_idea=selected_idea)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä
    await callback.message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! ‚ú®\n\n"
        f"–ò–¥–µ—è **\"{selected_idea['title']}\"**",
        parse_mode="Markdown"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é
    format_type = data.get("format_type", "")
    format_formatted = data.get("format_formatted", format_type)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    
    if should_offer_image(format_type):
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞–¥–µ–∂–æ–º
        format_lower = format_formatted.lower()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –≤ –¥–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
        if "–ø–æ—Å—Ç" in format_lower and "–¥–ª—è" in format_lower:
            # "–ü–æ—Å—Ç –¥–ª—è Instagram" ‚Üí "–ø–æ—Å—Ç—É –¥–ª—è Instagram"
            format_dative = format_formatted.replace("–ü–æ—Å—Ç", "–ø–æ—Å—Ç—É").replace("–ø–æ—Å—Ç", "–ø–æ—Å—Ç—É")
            question_text = f"–ù—É–∂–Ω–∞ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ {format_dative.lower()}?"
        elif "–ø–æ—Å—Ç" in format_lower:
            question_text = "–ù—É–∂–Ω–∞ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ –ø–æ—Å—Ç—É?"
        elif "—Å—Ç–∞—Ç—å—è" in format_lower:
            # "–°—Ç–∞—Ç—å—è –¥–ª—è –±–ª–æ–≥–∞" ‚Üí "—Å—Ç–∞—Ç—å–µ –¥–ª—è –±–ª–æ–≥–∞"
            format_dative = format_formatted.replace("–°—Ç–∞—Ç—å—è", "—Å—Ç–∞—Ç—å–µ").replace("—Å—Ç–∞—Ç—å—è", "—Å—Ç–∞—Ç—å–µ")
            question_text = f"–ù—É–∂–Ω–∞ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ {format_dative.lower()}?"
        elif "—Å—Ü–µ–Ω–∞—Ä–∏–π" in format_lower:
            format_dative = format_formatted.replace("–°—Ü–µ–Ω–∞—Ä–∏–π", "—Å—Ü–µ–Ω–∞—Ä–∏—é").replace("—Å—Ü–µ–Ω–∞—Ä–∏–π", "—Å—Ü–µ–Ω–∞—Ä–∏—é")
            question_text = f"–ù—É–∂–Ω–∞ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ {format_dative.lower()}?"
        elif "email" in format_lower or "–ø–∏—Å—å–º–æ" in format_lower or "—Ä–∞—Å—Å—ã–ª–∫–∞" in format_lower:
            question_text = "–ù—É–∂–Ω–∞ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            question_text = f"–ù—É–∂–Ω–∞ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞?"
        
        image_question = await callback.message.answer(
            question_text,
            reply_markup=get_yes_no_keyboard()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        await state.update_data(last_buttons_message_id=image_question.message_id)
        
        await state.set_state(ContentGenerationStates.ASKING_IMAGE)
    else:
        # –°—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await state.update_data(need_image=False)
        await callback.message.answer(
            "–°–µ–π—á–∞—Å —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç...\n\n"
            "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 20-30 —Å–µ–∫—É–Ω–¥",
            reply_markup=get_main_keyboard()
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await state.set_state(ContentGenerationStates.GENERATING_POST)
        niche = data.get("niche")
        goal = data.get("goal")
        
        await generate_and_send_post(callback.message, state, niche, goal, format_type, selected_idea)


@conversation_router.callback_query(ContentGenerationStates.ASKING_IMAGE, F.data == "need_image_yes")
async def handle_image_yes(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é"""
    await callback.answer()
    
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    log_user_action(logger, user_id, "–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –Ω—É–∂–Ω–∞")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ–± –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    await state.update_data(need_image=True)
    
    await callback.bot.send_message(
        chat_id=chat_id,
        text="–°–µ–π—á–∞—Å —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...\n\n"
             "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 30-40 —Å–µ–∫—É–Ω–¥",
        reply_markup=get_main_keyboard()
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await state.set_state(ContentGenerationStates.GENERATING_POST)
    
    data = await state.get_data()
    niche = data.get("niche")
    goal = data.get("goal")
    format_type = data.get("format_type")
    selected_idea = data.get("selected_idea")
    
    await generate_and_send_post(callback.message, state, niche, goal, format_type, selected_idea)


@conversation_router.callback_query(ContentGenerationStates.ASKING_IMAGE, F.data == "need_image_no")
async def handle_image_no(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é"""
    await callback.answer()
    
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    log_user_action(logger, user_id, "–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ–± –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    await state.update_data(need_image=False)
    
    await callback.bot.send_message(
        chat_id=chat_id,
        text="–°–µ–π—á–∞—Å —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç...\n\n"
             "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 20-30 —Å–µ–∫—É–Ω–¥",
        reply_markup=get_main_keyboard()
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await state.set_state(ContentGenerationStates.GENERATING_POST)
    
    data = await state.get_data()
    niche = data.get("niche")
    goal = data.get("goal")
    format_type = data.get("format_type")
    selected_idea = data.get("selected_idea")
    
    await generate_and_send_post(callback.message, state, niche, goal, format_type, selected_idea)


@conversation_router.callback_query(ContentGenerationStates.WAITING_IDEA_CHOICE, F.data == "regenerate_ideas")
async def handle_regenerate_ideas(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –∏–¥–µ–π"""
    await callback.answer()
    
    user_id = callback.from_user.id
    log_user_action(logger, user_id, "–ó–∞–ø—Ä–æ—Å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π")
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏: {e}")
    
    data = await state.get_data()
    niche = data.get("niche")
    goal = data.get("goal")
    format_type = data.get("format_type")
    
    await callback.message.answer("–•–æ—Ä–æ—à–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥—Ä—É–≥–∏–µ –∏–¥–µ–∏! üîÑ", reply_markup=get_main_keyboard())
    
    await state.set_state(ContentGenerationStates.GENERATING_IDEAS)
    await generate_and_show_ideas(callback.message, state, niche, goal, format_type)


async def generate_and_send_post(message: Message, state: FSMContext, niche: str, goal: str, format_type: str, idea: dict):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    chat_id = message.chat.id
    bot = message.bot
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ –Ω—É–∂–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞
    data = await state.get_data()
    need_image = data.get("need_image", False)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await send_typing_action(bot, chat_id, duration=3)
        
        if need_image:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            post_data, image_url, image_bytes = await post_generator.generate_complete_post(
                niche=niche,
                goal=goal,
                format_type=format_type,
                idea=idea
            )
            
            log_user_action(logger, user_id, "–ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º)
            photo_sent = False
            max_retries = 3
            
            for attempt in range(max_retries):
                try:
                    photo = BufferedInputFile(image_bytes, filename="post_image.png")
                    await bot.send_photo(
                        chat_id=chat_id,
                        photo=photo,
                        request_timeout=30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    )
                    photo_sent = True
                    logger.info(f"‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    break
                except Exception as e:
                    logger.warning(
                        f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å: {type(e).__name__}: {e}"
                    )
                    if attempt < max_retries - 1:
                        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    else:
                        logger.error(f"‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            post_text = format_post_with_hashtags(post_data)
            
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not photo_sent:
                warning_text = (
                    "‚ö†Ô∏è _–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é._\n"
                    "_–ù–æ –≤–æ—Ç —Ç–≤–æ–π –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:_\n\n"
                )
                post_text = warning_text + post_text
            
            await send_with_typing(
                bot=bot,
                chat_id=chat_id,
                text=f"{'‚îÅ' * 30}\n\n{post_text}\n\n{'‚îÅ' * 30}",
                parse_mode="Markdown",
                reply_markup=get_main_keyboard(),
                typing_duration=2
            )
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            post_data = await post_generator.generate_post_text(
                niche=niche,
                goal=goal,
                format_type=format_type,
                idea=idea
            )
            
            log_user_action(logger, user_id, "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            post_text = format_post_with_hashtags(post_data)
            
            await send_with_typing(
                bot=bot,
                chat_id=chat_id,
                text=f"{'‚îÅ' * 30}\n\n{post_text}\n\n{'‚îÅ' * 30}",
                parse_mode="Markdown",
                reply_markup=get_main_keyboard(),
                typing_duration=2
            )
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        continue_message = await message.answer(
            "‚úÖ –ì–æ—Ç–æ–≤–æ!\n\n"
            "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
            reply_markup=get_continue_keyboard()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        await state.update_data(last_buttons_message_id=continue_message.message_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await state.set_state(ContentGenerationStates.COMPLETED)
        
    except (GenerationError, Exception) as e:
        log_exception(logger, e, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
        
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
            reply_markup=get_main_keyboard()
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–¥–µ–∏
        await state.set_state(ContentGenerationStates.WAITING_IDEA_CHOICE)


@conversation_router.callback_query(ContentGenerationStates.COMPLETED, F.data == "create_new")
async def handle_create_new(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await callback.answer()
    
    user_id = callback.from_user.id
    log_user_action(logger, user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –µ—â–µ –æ–¥–∏–Ω üöÄ\n\n"
        "**–ö–∞–∫–∞—è —É —Ç–µ–±—è –Ω–∏—à–∞?**",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )
    
    await state.set_state(ContentGenerationStates.COLLECTING_NICHE)
    await state.update_data(off_topic_count=0, user_id=user_id)


@conversation_router.callback_query(ContentGenerationStates.COMPLETED, F.data == "finish")
async def handle_finish(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    await callback.answer()
    
    user_id = callback.from_user.id
    log_user_action(logger, user_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏: {e}")
    
    await callback.message.answer(
        "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–º–æ—á—å! üòä\n\n"
        "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
        "–ù–∞–∂–º–∏ **‚ú® –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥** –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç.\n\n"
        "–£–¥–∞—á–∏ —Å —Ç–≤–æ–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º! üöÄ",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )
    
    await state.clear()

